import numpy as npdef sigmoid(z):    # Logistic Neural Network    return 1/(1 + np.exp(-z))def NN(x_in, w):    # One is the bias node    x_out = [1]    c = len((w.shape))        r = 1        if c > 1:        r = w.shape[0]            for i in range(r):        val = 0        for x in range(len(x_in)):            if c > 1:                val += x_in[x] * w[i][x]            else:                val += x_in[x] * w[x]                    x_out.append(sigmoid(val))            return x_out      # The input layer...x_in = [1, 2]# The weights for x_inw = np.array([[-1, 1], [2, 1]])new_in = NN(x_in, w);new_w = np.array([2, -1, 1])h = NN(new_in, new_w)print(h)                                   